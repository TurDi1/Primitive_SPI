// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/12/2023 01:05:20"
                                                                                
// Verilog Test Bench template for design : BAUD_RATE_GENERATOR
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ns
module BAUD_RATE_GENERATOR_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg clk_en;
reg fsm_rst;
reg reset;
reg [1:0] spibr;
// wires                                               
wire baud_rate;

// assign statements (if any)                          
BAUD_RATE_GENERATOR i1 (
// port map - connection between master ports and signals/registers   
	.baud_rate(baud_rate),
	.clk(clk),
	.clk_en(clk_en),
	.fsm_rst(fsm_rst),
	.reset(reset),
	.spibr(spibr)
);


always
	#10 clk <= ~clk;

initial                                                
begin                                                  
	reset 	<= 0;
	clk		<= 0;
	clk_en	<= 1;
	fsm_rst	<= 1;
	spibr		<= 2'b00;
#50
	reset 	<= 1;
#100
	clk_en	<= 0;
#50
	clk_en	<= 1;
#250
	clk_en	<= 0;
#10	
	spibr		<= 2'b01;
#10
	clk_en	<= 1;
#500
	clk_en	<= 0;
#10
	spibr		<= 2'b10;
#10
	clk_en	<= 1;
#500
	clk_en	<= 0;
#10	
	spibr		<= 2'b11;
#10
	clk_en	<= 1;
#1000
	fsm_rst	<= 0;
#50
	fsm_rst	<= 1;
	
                                    
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

